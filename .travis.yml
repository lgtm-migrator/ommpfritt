language: cpp
services:
- xvfb
git:
  depth: false
install:
  - echo "clone lib2geom"
  - git clone https://gitlab.com/inkscape/lib2geom.git
  - pushd lib2geom
  - git checkout 37876ed4
  - popd
  - echo "configure lib2geom:"
  - $cmake --version
  - $cmake -GNinja
           -D2GEOM_TESTING=OFF
           -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
           -DCMAKE_C_COMPILER=${C_COMPILER}
           -B build-lib2geom
           -S lib2geom
  - sudo $cmake --build build-lib2geom --target install
jobs:
  include:
  - stage: build
    os: linux
    dist: xenial
    name: Build on Ubuntu Xenial
    before_install:
    - sudo apt-get clean
    - sudo apt-get remove -y mysql-client-5.7 mysql-server-5.7
    - sudo apt-add-repository -y ppa:deadsnakes/ppa
    - sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
    - sudo apt-add-repository -y ppa:beineri/opt-qt-5.12.3-xenial
    - sudo apt-get update -y -qq
    - sudo apt-get install -y
        g++-8 qt512tools qt512translations qt512svg qt512base qt512imageformats python3.7-dev
        ninja-build zlib1g-dev libssl-dev libffi-dev libgl-dev libboost-all-dev
        libdouble-conversion-dev libgsl-dev libcairo2-dev libpoppler-qt5-dev
        libkf5itemmodels-dev imagemagick
    - wget https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz
    - tar xf cmake-3.14.5-Linux-x86_64.tar.gz
    - export CXX_COMPILER=g++-8
    - export C_COMPILER=gcc-8
    - export QT_PREFIX="/opt/qt512"
    - export QT_QM_PATH="/opt/qt512/translations/"
    - export PATH="/opt/qt512/bin:$PATH"
    - export cmake="$(pwd)/cmake-3.14.5-Linux-x86_64/bin/cmake"
    after_success:
    - build-scripts/make-appimage.sh
  - stage: build
    os: linux
    dist: bionic
    name: Build on Ubuntu Bionic
    before_install:
    - sudo apt-get clean
    - sudo apt-get remove -y mysql-client-5.7 mysql-server-5.7
    - sudo apt-add-repository -y ppa:deadsnakes/ppa
    - sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
    - sudo apt-add-repository -y ppa:beineri/opt-qt-5.12.3-bionic
    - sudo apt-get update -y -qq
    - sudo apt-get install -y
        g++-8 qt512tools qt512translations qt512svg qt512base qt512imageformats python3.7-dev
        ninja-build zlib1g-dev libssl-dev libffi-dev libgl-dev libboost-all-dev
        libdouble-conversion-dev libgsl-dev libcairo2-dev libpoppler-qt5-dev
        libkf5itemmodels-dev imagemagick
    - wget https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz
    - tar xf cmake-3.14.5-Linux-x86_64.tar.gz
    - export CXX_COMPILER=g++-8
    - export C_COMPILER=gcc-8
    - export QT_PREFIX="/opt/qt512"
    - export QT_QM_PATH="/opt/qt512/translations/"
    - export PATH="/opt/qt512/bin:$PATH"
    - export cmake="$(pwd)/cmake-3.14.5-Linux-x86_64/bin/cmake"
  - stage: build
    os: linux
    dist: focal
    name: Build on Ubuntu Focal with GCC
    before_install:
    - sudo apt-get clean
    - sudo apt-get remove mysql-client-5.7 mysql-server-5.7
    - sudo apt-get update -y -qq
    - sudo apt-get install -y
        g++ gcc cmake qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools qt5-default
        libqt5svg5-dev qttools5-dev qttranslations5-l10n qttools5-dev ninja-build zlib1g-dev
        libssl-dev libffi-dev libgl-dev python3-dev libboost-all-dev libdouble-conversion-dev
        libgsl-dev libcairo2-dev libpoppler-qt5-dev libkf5itemmodels-dev imagemagick
    - export CXX_COMPILER=g++
    - export C_COMPILER=gcc
    - export QT_PREFIX=""
    - export QT_QM_PATH="/usr/share/qt5/translations/"
    - export cmake="cmake"
  - stage: build
    os: linux
    dist: focal
    name: Build on Ubuntu Focal with Clang
    before_install:
    - sudo apt-get clean
    - sudo apt-get remove mysql-client-5.7 mysql-server-5.7
    - sudo apt-get update -y -qq
    - sudo apt-get install -y
        clang cmake qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools qt5-default
        libqt5svg5-dev qttools5-dev qttranslations5-l10n qttools5-dev ninja-build zlib1g-dev
        libssl-dev libffi-dev libgl-dev python3-dev libboost-all-dev libdouble-conversion-dev
        libgsl-dev libcairo2-dev libpoppler-qt5-dev libkf5itemmodels-dev imagemagick
    - export CXX_COMPILER=clang++-10
    - export C_COMPILER=clang-10
    - export QT_PREFIX=""
    - export QT_QM_PATH="/usr/share/qt5/translations/"
    - export cmake="cmake"
  - stage: build
    os: linux
    dist: focal
    name: Check Format
    addons:
      apt:
        update: true
        packages:
        - clang
    install:
    - sudo apt-get install -y clang-format-10
    script:
    - clang-format --version
    - ln -s /usr/bin/clang-format-10 clang-format
    - PATH=$(pwd):$PATH build-scripts/format.sh check
  - stage: build
    os: windows
    name: Build on Windows/MinGW64
    before_install:
    - |-
      [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
      choco uninstall -y mingw
      choco upgrade --no-progress -y msys2
      export msys2='cmd //C RefreshEnv.cmd '
      export msys2+='& set MSYS=winsymlinks:nativestrict '
      export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
      export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
      export msys2+=" -msys2 -c "\"\$@"\" --"
      $msys2 pacman --sync --noconfirm --needed \
          make \
          python \
          mingw-w64-x86_64-toolchain \
          mingw-w64-x86_64-ninja \
          mingw-w64-x86_64-qt5 \
          mingw-w64-x86_64-poppler \
          mingw-w64-x86_64-python \
          mingw-w64-x86_64-kitemmodels-qt5 \
          mingw-w64-x86_64-openssl \
          mingw-w64-x86_64-libffi \
          mingw-w64-x86_64-zlib \
          mingw-w64-x86_64-python-pytest \
          mingw-w64-x86_64-dlfcn \
          mingw-w64-x86_64-nsis \
          mingw-w64-x86_64-boost \
          mingw-w64-x86_64-double-conversion \
          mingw-w64-x86_64-gsl \
          mingw-w64-x86_64-cython \
          mingw-w64-x86_64-gtk3 \
          mingw-w64-x86_64-cmake \
          mingw-w64-x86_64-mesa \
          mingw-w64-x86_64-gtkmm3 \
          mingw-w64-x86_64-imagemagick
      taskkill //IM gpg-agent.exe //F  # https://travis-ci.community/t/4967
      export PATH=/C/tools/msys64/mingw64/bin:$PATH
      export MAKE=mingw32-make  # so that Autotools can find it
    before_cache:
    - |-
      # https://unix.stackexchange.com/a/137322/107554
      $msys2 pacman --sync --clean --noconfirm
    cache:
      directories:
      - "$HOME/AppData/Local/Temp/chocolatey"
      - "/C/tools/msys64"
    install:
    script:
      - $mingw64 build-scripts/build-omm-mingw.sh
script:
- $cmake -GNinja
         -DCMAKE_BUILD_TYPE=Release
         -DQT_QM_PATH="$QT_QM_PATH"
         -DCMAKE_PREFIX_PATH="$QT_PREFIX"
         -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
         -DCMAKE_C_COMPILER=${C_COMPILER}
         -DSYSTEM_SUFFIX="-$TRAVIS_DIST"
         -S .
         -B build
- $cmake --build build --target package
after_script:
- build-scripts/notify-telegram.sh
notifications:
  webhooks:
    urls:
    - https://webhooks.gitter.im/e/9931d1c2db52be0aa323
    on_success: change
    on_failure: always
    on_start: never
branches:
  except:
  - # Do not build tags that we create when we upload to GitHub Releases
  - /^(?i:continuous)/

before_deploy:
  - git config --local user.email travis@github.com
  - git config --local user.name travis
  - |
    TAG_NAME="$(git describe --exact-match --tags HEAD)"
    if [ "$?" -ne "0" ]; then
      TAG_NAME="continuous-$(echo "$TRAVIS_COMMIT" | head -c20)"
      git tag "$TAG_NAME"
    fi
    export TAG_NAME="$TAG_NAME"
    git checkout "$TAG_NAME"
    export TRAVIS_TAG="$TAG_NAME"
deploy:
  provider: releases
  api_key:
    secure: LmZaJBVmy3lTvPO7bEBIf961wyaRI4y+A/3IpHnr9NmDtFg3crmvMsAxI1SEsBWsWHTjG/B4bCjQglfDryBd/7RJ5VAuQQJgnM/yYh5ft1ijzoh88HOUA/+gndwMSz6esaaUyt1y6I23dQzXdkHo0M1IrAqApbw42d4+u1kyRazz0PgzgVuMmosj2rpeGiIpXMRR452QyH6LkXosc5/rYjcAQGDRJxQeAYAeuf6JslqVidUqGNtHX1ZhZeAAx7L7H+Vc0bzxtNSCz7ogQlTr7/nS1O0AufAITBjt7uAiapJ5CEBlpUbwY5tI+NXmSDDHx4xqhuL2bL02rQevul3HL0mCwH2Vv8js2ktrVwq3QvNZAQkuTfRjI6pUG5ES89jezQcOejZilklL6YaGMT9ACPgMAexfFV02FRyZ61qDE9z6RXiJQbSHjL7t8lyoKIunw7FmJ4pgqo8UYUYJHjNmx9Kd+ttlHq6w6kZeXgMGOxVYb0SZa3AH0MDwQE74RnhJJ5N0jPMmyQMGKJ+ZfwdUq4hYu+simbiyL6RlvN9mjWsU4tE8V1rj0Xg0lbm1hnONjoJw9+kWDTM+vmvMB3Dkuuauv8OuI0TiBgrG0a+Cv2N4Tc5nFOBdVjZzviiX6If9NXPRSw3jWdXZZwqbxXnj5S7IPvCFKgTV4ML4Jpi9jKQ=
  file_glob: true
  file:
  - build/ommpfritt-*-win64.exe
  - build/ommpfritt-*-Linux-*.sh
  - build/ommpfritt-*-Linux-*.tar.gz
  - build/ommpfritt-*-Linux-*.tar.Z
  - build/ommpfritt-*-x86_64.AppImage
  on:
    repo: pasbi/ommpfritt
    tags: true
  cleanup: 'true'
branches:
  except:
    - /^(?i:continuous)-.*$/
